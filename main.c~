#include "shell.h"
/**
 *main - initializes variables for simple shell
 *Return: 0 for success and 1 for faliure 
 */
int main(void)
{
	int start = 1;
	size_t size = 1024;
	char *input = NULL;
	char *command;
	char args[100];
	pid_t child;
	int status;

	if (non_int_shell(string, args, &size))
	   return (0);

	while(start)
	{
		initialise_shell(&input, &size);
		getline(&string, &size, stdin);
		make_token(&args, &string);
		check_exit(&string);
		
		command = args[0];		
		if (command != NULL)
		{
			child = fork;
			if (child == 0)
			{
				if(excve(command, args, NULL) == -1)
					perror("excev failed");
				exit (EXIT_FAILURE);
			}
			else
			{
				waitpid(child, &status, 0);
				free(string);
			}
		}
		else
			printf("%s: not found\n", args[0]);
		free(command);
		free(string);				   
	}
	return (0);
}

/**
 * Non_int_shell - check if shell is being used non interactively
 *Return: 1 for success and 0 for no command given
 */
int Non_int_shell(char *input, char *args[], size_t *size)
{
	char *command;

	if (!isatty(fileno(stdin)))
	{
		input = malloc(*size);
		if (input == NULL)
			exit(EXIT_FAILURE);

		getline(&input, size, stdin);
		make_token(&args, &input);
		command = args[0];
		
		if (find_path(&command))
		{
			execve(command, args, NULL);
			/* This line runs only if execve fails */
			free(string);
			perror("execve");
			exit(EXIT_FAILURE);
		}
	}
	else
		return (0);
}
